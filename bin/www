#!/usr/bin/env node
var debug = require('debug')('server');
var https = require('https');
var fs = require('fs');
var settings = require('../settings');
var app = require('../app');

var port = settings.server.portForProxy || settings.server.port || 3000
app.set('port', port);
var server;
if (settings.server.ssl) {
    server = https.createServer({
        key: fs.readFileSync(settings.server.ssl.key),
        cert: fs.readFileSync(settings.server.ssl.cert)
    }, app);
}
else
    server = app;

server.listen(port);
server.on('error', function (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
server.on('listening', function () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
});
//server.setTimeout(0);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
